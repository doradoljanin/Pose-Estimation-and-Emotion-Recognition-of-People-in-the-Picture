# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os,sys
import os.path

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import warnings
warnings.filterwarnings("ignore", "Distutils was imported before Setuptools. This usage is discouraged and may exhibit undesirable behaviors or errors. Please use Setuptools' objects directly or at least import Setuptools first.",  UserWarning, "setuptools.distutils_patch")


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog, QDialog, QMessageBox
from PyQt5.QtGui import QPixmap
from objectdetection import objectdetection 
from posedetection import *
import emotion_detection
import cv2


#global
working_image_path = ''
temp_show_location = 'temp.jpg'
temp = None
status = ''
flags = {'p_f':False,'d_f':False,'e_f':False}
object_detection_result = None
emotion_detection_result = None
ui = None
class Ui_MainWindow(QDialog):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(800,604)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(0, 10, 791, 531))
        self.graphicsView.setObjectName("graphicsView")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 550, 131, 27))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.object_detection_action)
        
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(150, 550, 121, 27))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.pose_detection_action)
        
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(280, 550, 141, 27))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.emotion_detection_action)
        
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(700, 550, 91, 27))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.save_action)
        
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(600, 550, 91, 27))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.open_action)
        
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(500, 550, 91, 27))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.reset_action)
        
        
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Det3ction"))
        self.pushButton.setText(_translate("MainWindow", "Object detection"))
        self.pushButton_2.setText(_translate("MainWindow", "Pose detection"))
        self.pushButton_3.setText(_translate("MainWindow", "Emotion detection"))
        self.pushButton_4.setText(_translate("MainWindow", "Save"))
        self.pushButton_5.setText(_translate("MainWindow", "Open"))
        self.pushButton_6.setText(_translate("MainWindow", "Reset"))

    
    def showImage(self,image_path):
        global working_image_path
        scene = QtWidgets.QGraphicsScene(self)
        pixmap = QPixmap(image_path)
        pixmap_scaled_to_height = pixmap.scaled(791, 531, QtCore.Qt.KeepAspectRatio)
        item = QtWidgets.QGraphicsPixmapItem(pixmap_scaled_to_height)
        
        scene.addItem(item)
        
        self.graphicsView.setScene(scene)
        input_path_head,input_path_tail = os.path.split(working_image_path)
        h,w,c = temp.shape
        status = (input_path_tail+" :: "+str(w) + "x" + str(h))
        self.statusbar.showMessage(status)
        
        
    def object_detection_action(self):
        global temp_show_location,working_image_path, status, flags, object_detection_result
        temp_location = None
        flags['d_f'] = True
        if working_image_path == '':
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage('No image selected.')
            error_dialog.exec_()
        else:
            if flags['p_f'] or flags['e_f']:
                temp_location = temp_show_location
            else:
                temp_location = working_image_path
            temp = cv2.imread(temp_location)
            object_detection_result = objectdetection.get_people_coordinates(working_image_path)
        
            for i in object_detection_result:
                cv2.rectangle(temp,(i[0],i[1]),(i[2],i[3]),(0,0,255),2)
            cv2.imwrite(temp_show_location,temp)
            self.showImage(temp_show_location)
    def pose_detection_action(self):
        global temp_show_location,working_image_path,temp, status, flags, object_detection_result, emotion_detection_result
        flags['p_f'] = True
        if working_image_path == '':
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage('No image selected.')
            error_dialog.exec_()
        else:
            pose_cv2_obj = pose_detection.poseDetection(working_image_path)
            temp = pose_cv2_obj
            if flags['d_f']:
                for i in object_detection_result:
                    cv2.rectangle(temp,(i[0],i[1]),(i[2],i[3]),(0,0,255),2)
            if flags['e_f']:
                for i in emotion_detection_result:
                    cv2.rectangle(temp,i[0],i[1],(255,0,0),2)
                    text_position = (i[0][0],i[0][1]-10) #left upper corner
                    cv2.putText(temp,i[2],text_position, cv2.FONT_HERSHEY_SIMPLEX,1,(0,255,0),2)
            cv2.imwrite(temp_show_location,temp)
            self.showImage(temp_show_location)
        
    def emotion_detection_action(self):
        global temp_show_location,working_image_path, status, flags, emotion_detection_result
        temp_location = None
        flags['e_f'] = True
        if working_image_path == '':
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage('No image selected.')
            error_dialog.exec_()
        else:
            if flags['p_f'] or flags['d_f']:
                temp_location = temp_show_location
            else:
                temp_location = working_image_path
            temp = cv2.imread(temp_location)
            emotion_detection_result = emotion_detection.get_emotions(working_image_path)
        
            for i in emotion_detection_result:
                cv2.rectangle(temp,i[0],i[1],(255,0,0),2)
                text_position = (i[0][0],i[0][1]-10) #left upper corner
                cv2.putText(temp,i[2],text_position, cv2.FONT_HERSHEY_SIMPLEX,1,(0,255,0),2)
            cv2.imwrite(temp_show_location,temp)
            self.showImage(temp_show_location)
            
    def save_action(self):
        global temp_show_location
        if temp_show_location == '':
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage('No changes were made.')
            error_dialog.exec_()
        else:
            fd = File_Dialog()
            save_image_path = fd.saveFileDialog()
            if save_image_path == None or os.path.isdir(save_image_path):
                if save_image_path == None:
                    pass
                elif os.path.isdir(save_image_path):
                    error_dialog = QtWidgets.QErrorMessage()
                    error_dialog.showMessage('Invalid name/file type')
                    error_dialog.exec_()
                
            else:
                save = cv2.imread(temp_show_location)
                cv2.imwrite(save_image_path,save)
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setText("Success!")
                msg.setInformativeText("Image saved at: " + save_image_path)
                msg.setWindowTitle("Image saved!")
                msg.exec_()

    def open_action(self):
        global working_image_path,temp,temp_show_location, status,flags,object_detection_result,emotion_detection_result
        fd = File_Dialog()
        working_image_path = fd.openFileNameDialog()
        if working_image_path == None:
            pass
        else:
            input_path_head,input_path_tail = os.path.split(working_image_path)
            temp = cv2.imread(working_image_path)
            h,w,c = temp.shape
            
            if os.path.exists(temp_show_location):
                os.remove(temp_show_location)
            flags['p_f'] = False
            flags['d_f'] = False
            flags['e_f'] = False
            object_detection_result = None
            emotion_detection_result = None
            
            status = (input_path_tail+" :: "+str(w) + "x" + str(h))
            self.showImage(working_image_path)
            self.statusbar.showMessage(status)
    

    def reset_action(self):
        global working_image_path,temp_show_location, status,flags,object_detection_result,emotion_detection_result

        input_path_head,input_path_tail = os.path.split(working_image_path)
        temp = cv2.imread(working_image_path)
        h,w,c = temp.shape
        
        if os.path.exists(temp_show_location):
            os.remove(temp_show_location)
        flags['p_f'] = False
        flags['d_f'] = False
        flags['e_f'] = False
        object_detection_result = None
        emotion_detection_result = None
        
        status = (input_path_tail+" :: "+str(w) + "x" + str(h))
        self.showImage(working_image_path)
        self.statusbar.showMessage(status)

class File_Dialog(QWidget):

    def __init__(self):
        super().__init__()
    
    
    def openFileNameDialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(self,"Det3ction: Open image", "","Images (*.png *.bmp *.jpg *.jpeg)", options=options)
        head,tail = os.path.splitext(fileName)
        if tail in ['.jpg','.png','.bmp','.jpeg', '.JPG']:
            return(fileName)
        else:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage('Invalid name/file type')
            error_dialog.exec_()
            return(None)
    def openFileNamesDialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        files, _ = QFileDialog.getOpenFileNames(self,"QFileDialog.getOpenFileNames()", "","All Files (*);;Python Files (*.py)", options=options)
        if files:
            return(files)
    
    def saveFileDialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getSaveFileName(self,"Det3ction: Save image","","Images (*.png *.bmp *.jpg *.jpeg)", options=options)
        head,tail = os.path.splitext(fileName)
        if tail in ['.jpg','.png','.bmp','.jpeg', '.JPG']:
            return(fileName)
        else:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage('Invalid name/file type')
            error_dialog.exec_()
            return(None)
            
            
        
def draw_object_detection(input_location):
    global temp
    rectangles = objectdetection.get_people_coordinates(input_location)
    for i in rectangles:
            cv2.rectangle(temp,(i[0],i[1]),(i[2],i[3]),(255,0,0),2)
def closeEvent():
    global temp_show_location
    if os.path.exists(temp_show_location):
        os.remove(temp_show_location)
def main():
    global working_image_path,temp,temps,ui,status
    app = QtWidgets.QApplication(sys.argv)
    app.aboutToQuit.connect(closeEvent)
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setWindowIcon(QtGui.QIcon('icon.png'))
    
    status = ("No image selected.")

    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.statusbar.showMessage(status)


    MainWindow.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()